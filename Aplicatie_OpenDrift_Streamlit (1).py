
import streamlit as st
import folium
from streamlit_folium import folium_static
import requests
from datetime import datetime
import random

st.set_page_config(page_title="Simulare DerivÄƒ SAR", layout="wide")

st.title("ğŸŒŠ Simulare DerivÄƒ MaritimÄƒ (SAR) â€“ RomÃ¢nia / Marea NeagrÄƒ")

st.markdown("AceastÄƒ aplicaÈ›ie simplificatÄƒ estimeazÄƒ deriva unui obiect Ã®n derivÄƒ pe mare pe baza direcÈ›iei vÃ¢ntului È™i a poziÈ›iei iniÈ›iale. Datele reale pot fi extinse.")

# PoziÈ›ie de start
lat = st.number_input("Latitudine iniÈ›ialÄƒ", value=44.15, format="%.6f")
lon = st.number_input("Longitudine iniÈ›ialÄƒ", value=28.65, format="%.6f")

# DirecÈ›ie vÃ¢nt (simplificat)
wind_speed = st.slider("VitezÄƒ vÃ¢nt (m/s)", 0.0, 20.0, 5.0)
wind_direction = st.slider("DirecÈ›ie vÃ¢nt (grade â€“ 0=N, 90=E)", 0, 360, 90)

duration_hours = st.slider("DuratÄƒ simulare (ore)", 1, 24, 6)

# Coeficient leeway (proporÈ›ia din vÃ¢nt preluatÄƒ de obiect)
alpha = st.slider("Coeficient de derivÄƒ Î± (%)", 0.0, 10.0, 3.0) / 100.0

# Calcule simple (ignorÃ¢nd curenÈ›i È™i valuri pentru acest demo)
distance_km = wind_speed * alpha * 3.6 * duration_hours
direction_rad = wind_direction * 3.14159 / 180

# Conversie simplificatÄƒ lat/lon (funcÈ›ioneazÄƒ pentru distanÈ›e mici)
delta_lat = (distance_km / 111) * math.cos(direction_rad)
delta_lon = (distance_km / (111 * math.cos(lat * 3.14159 / 180))) * math.sin(direction_rad)

final_lat = lat + delta_lat
final_lon = lon + delta_lon

m = folium.Map(location=[lat, lon], zoom_start=7)
folium.Marker([lat, lon], tooltip="PoziÈ›ie IniÈ›ialÄƒ", icon=folium.Icon(color="blue")).add_to(m)
folium.Marker([final_lat, final_lon], tooltip="PoziÈ›ie EstimatÄƒ", icon=folium.Icon(color="red")).add_to(m)
folium.PolyLine(locations=[[lat, lon], [final_lat, final_lon]], color="green").add_to(m)

st.markdown(f"**DistanÈ›Äƒ estimatÄƒ derivÄƒ:** `{distance_km:.2f}` km")
folium_static(m)

st.caption("Simulare simplificatÄƒ â€“ fÄƒrÄƒ date reale de curent sau valuri. Versiune demonstrativÄƒ.")
